{
  "version": "0.0.1",
  "name": "OLang",
  "scopeName": "source.olang",
  "fileTypes": [
    "olang"
  ],
  "patterns": [
    {
      "include": "#lineComment"
    },
    {
      "include": "#blockComment"
    },
    {
      "include": "#classDeclaration"
    }
  ],
  "repository": {
    "assignment": {
      "match": "(?:\\b((?:\\w+))(?:(?:\\s+)?)(:=)(?:(?:\\s+)?)(.*))",
      "captures": {
        "1": {
          "name": "variable.other.olang"
        },
        "2": {
          "name": "keyword.operator.olang"
        },
        "3": {
          "name": "meta.expression.olang"
        }
      }
    },
    "blockComment": {
      "begin": "(?:\\/\\*)",
      "end": "(?:\\*\\/)",
      "beginCaptures": {
      },
      "endCaptures": {
      },
      "name": "comment.block.olang"
    },
    "body": {
      "patterns": [
        {
          "include": "#variableDecl"
        },
        {
          "include": "#assignment"
        },
        {
          "include": "#whileMeta"
        },
        {
          "include": "#ifMeta"
        },
        {
          "include": "#returnStatement"
        },
        {
          "include": "#lineComment"
        },
        {
          "include": "#blockComment"
        }
      ]
    },
    "classDeclName": {
      "match": "(?:(?<=class)(?:\\s+)(?:\\b((?:\\w+))(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?)\\])?))(?:\\s+)(?:(?:(extends)(?:\\s+)(?:\\b((?:\\w+))(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?)\\])?)))?)(is))",
      "captures": {
        "1": {
          "name": "entity.name.type.olang"
        },
        "2": {
          "name": "entity.name.type.olang"
        },
        "3": {
          "name": "keyword.control.olang"
        },
        "4": {
          "name": "entity.name.type.olang"
        },
        "5": {
          "name": "entity.name.type.olang"
        },
        "6": {
          "name": "keyword.control.olang"
        }
      }
    },
    "classDeclaration": {
      "begin": "\\b(class)\\b",
      "end": "\\b(end)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.olang"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control.olang"
        }
      },
      "name": "meta.class.olang",
      "patterns": [
        {
          "include": "#methodMeta"
        },
        {
          "include": "#classDeclName"
        },
        {
          "include": "#variableDecl"
        },
        {
          "include": "#constructorMeta"
        },
        {
          "include": "#lineComment"
        },
        {
          "include": "#blockComment"
        }
      ]
    },
    "className": {
      "match": "(?:\\b((?:\\w+))(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?)\\])?))",
      "captures": {
        "1": {
          "name": "entity.name.type.olang"
        },
        "2": {
          "name": "entity.name.type.olang"
        }
      }
    },
    "constructorDecl": {
      "match": "(?:(?<=\\b(?:this)(?:(?:\\s+)?))(?:(?:\\((?:(?:\\s+)?)(?:\\b((?:\\w+))(?:(?:\\s+)?):(?:(?:\\s+)?)(?:\\b((?:\\w+))(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?)\\])?))(?:(?:\\s+)?))((?:,(?:(?:\\s+)?)(?:\\w+)(?:(?:\\s+)?):(?:(?:\\s+)?)(?:\\b(?:\\w+)(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)(?:\\w+)(?:(?:\\s+)?)\\])?))(?:(?:\\s+)?))*)\\))?)(?:(?:\\s+)?)(is))",
      "captures": {
        "1": {
          "name": "variable.parameter.olang"
        },
        "2": {
          "name": "entity.name.type.olang"
        },
        "3": {
          "name": "entity.name.type.olang"
        },
        "4": {
          "patterns": [
            {
              "match": "(?:,(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?):(?:(?:\\s+)?)(?:\\b((?:\\w+))(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?)\\])?))(?:(?:\\s+)?))",
              "captures": {
                "1": {
                  "name": "variable.parameter.olang"
                },
                "2": {
                  "name": "entity.name.type.olang"
                },
                "3": {
                  "name": "entity.name.type.olang"
                }
              }
            }
          ]
        },
        "5": {
          "name": "keyword.control.olang"
        }
      }
    },
    "constructorMeta": {
      "begin": "\\b(this)\\b",
      "end": "\\b(end)\\b",
      "beginCaptures": {
        "1": {
          "name": "variable.language.olang"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control.olang"
        }
      },
      "name": "meta.constructor.olang",
      "patterns": [
        {
          "include": "#constructorDecl"
        },
        {
          "include": "#body"
        }
      ]
    },
    "cparameterDecl": {
      "match": "(?:,(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?):(?:(?:\\s+)?)(?:\\b((?:\\w+))(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?)\\])?))(?:(?:\\s+)?))",
      "captures": {
        "1": {
          "name": "variable.parameter.olang"
        },
        "2": {
          "name": "entity.name.type.olang"
        },
        "3": {
          "name": "entity.name.type.olang"
        }
      }
    },
    "elseKeyword": {
      "match": "(?:\\b(else)\\b)",
      "captures": {
        "1": {
          "name": "keyword.control.olang"
        }
      }
    },
    "ifExpr": {
      "match": "(?:(?<=if)(.*)(then))",
      "captures": {
        "1": {
          "name": "meta.expression.olang"
        },
        "2": {
          "name": "keyword.control.olang"
        }
      }
    },
    "ifMeta": {
      "begin": "\\b(if)",
      "end": "\\b(end)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.olang"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control.olang"
        }
      },
      "name": "meta.ifstatement.olang",
      "patterns": [
        {
          "include": "#ifExpr"
        },
        {
          "include": "#elseKeyword"
        },
        {
          "include": "#body"
        }
      ]
    },
    "lineComment": {
      "begin": "(?:\\/\\/)",
      "end": "$",
      "beginCaptures": {
      },
      "endCaptures": {
      },
      "name": "comment.line.double-slash.olang"
    },
    "methodDecl": {
      "match": "(?:(?<=\\b(?:method)(?:\\s+))((?:\\w+))(?:(?:\\s+)?)(?:(?:\\((?:(?:\\s+)?)(?:\\b((?:\\w+))(?:(?:\\s+)?):(?:(?:\\s+)?)(?:\\b((?:\\w+))(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?)\\])?))(?:(?:\\s+)?))((?:,(?:(?:\\s+)?)(?:\\w+)(?:(?:\\s+)?):(?:(?:\\s+)?)(?:\\b(?:\\w+)(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)(?:\\w+)(?:(?:\\s+)?)\\])?))(?:(?:\\s+)?))*)\\))?)(?:(?:\\s+)?)(?:(?::(?:(?:\\s+)?)(?:\\b((?:\\w+))(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?)\\])?)))?)(?:\\s+)(is))",
      "captures": {
        "1": {
          "name": "entity.name.function.olang"
        },
        "2": {
          "name": "variable.parameter.olang"
        },
        "3": {
          "name": "entity.name.type.olang"
        },
        "4": {
          "name": "entity.name.type.olang"
        },
        "5": {
          "patterns": [
            {
              "match": "(?:,(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?):(?:(?:\\s+)?)(?:\\b((?:\\w+))(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?)\\])?))(?:(?:\\s+)?))",
              "captures": {
                "1": {
                  "name": "variable.parameter.olang"
                },
                "2": {
                  "name": "entity.name.type.olang"
                },
                "3": {
                  "name": "entity.name.type.olang"
                }
              }
            }
          ]
        },
        "6": {
          "name": "entity.name.type.olang"
        },
        "7": {
          "name": "entity.name.type.olang"
        },
        "8": {
          "name": "keyword.control.olang"
        }
      }
    },
    "methodMeta": {
      "begin": "\\b(method)\\b",
      "end": "\\b(end)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.olang"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control.olang"
        }
      },
      "name": "meta.function.olang",
      "patterns": [
        {
          "include": "#methodDecl"
        },
        {
          "include": "#body"
        }
      ]
    },
    "parameterDecl": {
      "match": "(?:\\b((?:\\w+))(?:(?:\\s+)?):(?:(?:\\s+)?)(?:\\b((?:\\w+))(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?)\\])?))(?:(?:\\s+)?))",
      "captures": {
        "1": {
          "name": "variable.parameter.olang"
        },
        "2": {
          "name": "entity.name.type.olang"
        },
        "3": {
          "name": "entity.name.type.olang"
        }
      }
    },
    "returnStatement": {
      "match": "(?:\\b(return)(?:(?:(?:\\s+)(.*))?))",
      "captures": {
        "1": {
          "name": "keyword.control.olang"
        },
        "2": {
          "name": "meta.expression.olang"
        }
      }
    },
    "returnTypeDecl": {
      "match": "(?::(?:(?:\\s+)?)(?:\\b((?:\\w+))(?:(?:\\s+)?)(?:(?:\\[(?:(?:\\s+)?)((?:\\w+))(?:(?:\\s+)?)\\])?)))",
      "captures": {
        "1": {
          "name": "entity.name.type.olang"
        },
        "2": {
          "name": "entity.name.type.olang"
        }
      }
    },
    "variableDecl": {
      "match": "(?:\\b(var)(?:\\s+)(\\w+)(?:\\s+):(.*))",
      "captures": {
        "1": {
          "name": "keyword.control.olang"
        },
        "2": {
          "name": "variable.other.olang"
        },
        "3": {
          "name": "meta.expression.olang"
        }
      }
    },
    "whileLoop": {
      "match": "(?:(?<=while)(.*)(loop))",
      "captures": {
        "1": {
          "name": "meta.expression.olang"
        },
        "2": {
          "name": "keyword.control.olang"
        }
      }
    },
    "whileMeta": {
      "begin": "\\b(while)",
      "end": "\\b(end)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.olang"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control.olang"
        }
      },
      "name": "meta.whileloop.olang",
      "patterns": [
        {
          "include": "#whileLoop"
        },
        {
          "include": "#body"
        }
      ]
    }
  }
}